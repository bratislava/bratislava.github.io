"use strict";(self.webpackChunkbratislava_github_io=self.webpackChunkbratislava_github_io||[]).push([[2208],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),g=a,m=u["".concat(l,".").concat(g)]||u[g]||c[g]||r;return n?i.createElement(m,o(o({ref:t},d),{},{components:n})):i.createElement(m,o({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1315:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const r={},o="Github actions",s={unversionedId:"deployment-and-infrastructure/github-actions",id:"deployment-and-infrastructure/github-actions",title:"Github actions",description:"Using a pipelines",source:"@site/docs/deployment-and-infrastructure/github-actions.md",sourceDirName:"deployment-and-infrastructure",slug:"/deployment-and-infrastructure/github-actions",permalink:"/docs/deployment-and-infrastructure/github-actions",draft:!1,editUrl:"https://github.com/bratislava/bratislava.github.io/edit/master/docs/deployment-and-infrastructure/github-actions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Deployment",permalink:"/docs/deployment-and-infrastructure/deployment"},next:{title:"Grafana",permalink:"/docs/deployment-and-infrastructure/grafana"}},l={},p=[{value:"Using a pipelines",id:"using-a-pipelines",level:2},{value:"dev",id:"dev",level:4},{value:"staging",id:"staging",level:4},{value:"prod",id:"prod",level:4},{value:"Setup github actions for Next/Strapi project",id:"setup-github-actions-for-nextstrapi-project",level:3},{value:"How to deploy to different clusters?",id:"how-to-deploy-to-different-clusters",level:3},{value:"dev",id:"dev-1",level:4},{value:"staging",id:"staging-1",level:4},{value:"prod",id:"prod-1",level:4},{value:"More commands",id:"more-commands",level:3},{value:"Pipelines explanation",id:"pipelines-explanation",level:3}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"github-actions"},"Github actions"),(0,a.kt)("h2",{id:"using-a-pipelines"},"Using a pipelines"),(0,a.kt)("h4",{id:"dev"},"dev"),(0,a.kt)("p",null,"For deployment ",(0,a.kt)("inlineCode",{parentName:"p"},"next")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"dev")," you need to tag your commit in whatever branch with tag ",(0,a.kt)("inlineCode",{parentName:"p"},"dev-next*")," which can be like ",(0,a.kt)("inlineCode",{parentName:"p"},"dev-next1.0"),"\nFor deployment ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"dev")," you need to tag your commit in whatever branch with tag ",(0,a.kt)("inlineCode",{parentName:"p"},"dev-strpai*")," which can be like ",(0,a.kt)("inlineCode",{parentName:"p"},"dev-strapi1.0"),"\nOr for whole stack, you just tag it like ",(0,a.kt)("inlineCode",{parentName:"p"},"dev1.0"),"."),(0,a.kt)("p",null,"Tagging command: ",(0,a.kt)("inlineCode",{parentName:"p"},'git tag -a dev-next1.0 -m "dev-next1.0 - updated feature"'),"\nPush changed to prod: ",(0,a.kt)("inlineCode",{parentName:"p"},"git push --tags")),(0,a.kt)("h4",{id:"staging"},"staging"),(0,a.kt)("p",null,"For deployment to ",(0,a.kt)("inlineCode",{parentName:"p"},"staging")," you can merge pull request or tag it accordingly with tag format ",(0,a.kt)("inlineCode",{parentName:"p"},"staging-next*"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"staging-strapi*"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"staging*"),","),(0,a.kt)("h4",{id:"prod"},"prod"),(0,a.kt)("p",null,"For deployment to ",(0,a.kt)("inlineCode",{parentName:"p"},"prod")," you can merge pull request or tag it accordingly with tag format ",(0,a.kt)("inlineCode",{parentName:"p"},"prod-next*"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"prod-strapi*"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"prod*"),". You need to be also on ",(0,a.kt)("inlineCode",{parentName:"p"},"master")),(0,a.kt)("h3",{id:"setup-github-actions-for-nextstrapi-project"},"Setup github actions for Next/Strapi project"),(0,a.kt)("p",null,"We have predefined actions for repeated pipelines, so there is only one file that needs to be added to repo:"),(0,a.kt)("p",null,"Deploy version 1.0. (02.09.2022)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"name: Strapi/Next deploy pipeline\non:\n  push:\n    tags:\n      - 'dev**'\n      - 'staging**'\n      - 'prod**'\n  pull_request:\n    types:\n      - closed\n\njobs:\n  conditions:\n    name: Check for cluster conditions\n    uses: bratislava/github-actions/.github/workflows/cluster-deploy-conditions.yml@stable\n\n  deploy-dev:\n    name: after dev Strapi deploy Next\n    if: needs.conditions.outputs.dev == 'true'\n    needs: [conditions, deploy-dev-strapi]\n    uses: bratislava/github-actions/.github/workflows/deploy-with-bratiska-cli.yml@stable\n    with:\n      directory: next/\n      cluster: tkg-innov-dev\n      url: https://tkg.dev.bratislava.sk\n      debug: --debug\n    secrets:\n      service-account: ${{ secrets.DEV_STANDALONE_TOKEN }}\n      registry-pass: ${{ secrets.HARBOR_REGISTRY_PASSWORD }}\n\n  deploy-dev-strapi:\n    name: dev Strapi\n    needs: conditions\n    if: needs.conditions.outputs.dev-strapi == 'true'\n    uses: bratislava/github-actions/.github/workflows/deploy-with-bratiska-cli.yml@stable\n    with:\n      directory: strapi/\n      cluster: tkg-innov-dev\n      url: https://tkg.dev.bratislava.sk\n    secrets:\n      service-account: ${{ secrets.DEV_STANDALONE_TOKEN }}\n      registry-pass: ${{ secrets.HARBOR_REGISTRY_PASSWORD }}\n\n  deploy-dev-next:\n    name: dev Next\n    needs: conditions\n    if: needs.conditions.outputs.dev-next == 'true'\n    uses: bratislava/github-actions/.github/workflows/deploy-with-bratiska-cli.yml@stable\n    with:\n      directory: next/\n      cluster: tkg-innov-dev\n      url: https://tkg.dev.bratislava.sk\n    secrets:\n      service-account: ${{ secrets.DEV_STANDALONE_TOKEN }}\n      registry-pass: ${{ secrets.HARBOR_REGISTRY_PASSWORD }}\n\n  deploy-staging:\n    name: after staging Strapi deploy Next\n    if: needs.conditions.outputs.staging == 'true'\n    needs: [conditions, deploy-staging-strapi]\n    uses: bratislava/github-actions/.github/workflows/deploy-with-bratiska-cli.yml@stable\n    with:\n      directory: next/\n      cluster: tkg-innov-staging\n      url: https://tkg.staging.bratislava.sk\n      flag: --staging\n    secrets:\n      service-account: ${{ secrets.STAGING_STANDALONE_TOKEN }}\n      registry-pass: ${{ secrets.HARBOR_REGISTRY_PASSWORD }}\n\n  deploy-staging-strapi:\n    name: staging Strapi\n    needs: conditions\n    if: needs.conditions.outputs.staging-strapi == 'true'\n    uses: bratislava/github-actions/.github/workflows/deploy-with-bratiska-cli.yml@stable\n    with:\n      directory: strapi/\n      cluster: tkg-innov-staging\n      url: https://tkg.staging.bratislava.sk\n      flag: --staging\n    secrets:\n      service-account: ${{ secrets.STAGING_STANDALONE_TOKEN }}\n      registry-pass: ${{ secrets.HARBOR_REGISTRY_PASSWORD }}\n\n  deploy-staging-next:\n    name: staging Next\n    needs: conditions\n    if: needs.conditions.outputs.staging-next == 'true'\n    uses: bratislava/github-actions/.github/workflows/deploy-with-bratiska-cli.yml@stable\n    with:\n      directory: next/\n      cluster: tkg-innov-staging\n      url: https://tkg.staging.bratislava.sk\n      flag: --staging\n    secrets:\n      service-account: ${{ secrets.STAGING_STANDALONE_TOKEN }}\n      registry-pass: ${{ secrets.HARBOR_REGISTRY_PASSWORD }}\n\n  deploy-prod:\n    name: after prod Strapi deploy Next\n    if: needs.conditions.outputs.prod == 'true'\n    needs: [conditions, deploy-prod-strapi]\n    uses: bratislava/github-actions/.github/workflows/deploy-with-bratiska-cli.yml@stable\n    with:\n      directory: next/\n      cluster: tkg-innov-prod\n      url: https://tkg.bratislava.sk\n      flag: --production\n    secrets:\n      service-account: ${{ secrets.PROD_STANDALONE_TOKEN }}\n      registry-pass: ${{ secrets.HARBOR_REGISTRY_PASSWORD }}\n\n  deploy-prod-strapi:\n    name: prod Strapi\n    needs: conditions\n    if: needs.conditions.outputs.prod-strapi == 'true'\n    uses: bratislava/github-actions/.github/workflows/deploy-with-bratiska-cli.yml@stable\n    with:\n      directory: strapi/\n      cluster: tkg-innov-prod\n      url: https://tkg.bratislava.sk\n      flag: --production\n      debug: --debug\n    secrets:\n      service-account: ${{ secrets.PROD_STANDALONE_TOKEN }}\n      registry-pass: ${{ secrets.HARBOR_REGISTRY_PASSWORD }}\n\n  deploy-prod-next:\n    name: prod Next\n    needs: conditions\n    if: needs.conditions.outputs.prod-next == 'true'\n    uses: bratislava/github-actions/.github/workflows/deploy-with-bratiska-cli.yml@stable\n    with:\n      directory: next/\n      cluster: tkg-innov-prod\n      url: https://tkg.bratislava.sk\n      flag: --production\n    secrets:\n      service-account: ${{ secrets.PROD_STANDALONE_TOKEN }}\n      registry-pass: ${{ secrets.HARBOR_REGISTRY_PASSWORD }}\n")),(0,a.kt)("p",null,"There are defined 9 different jobs. We can split it to three categories:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"deployment of ",(0,a.kt)("inlineCode",{parentName:"li"},"strapi")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"dev"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"staging"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"prod")),(0,a.kt)("li",{parentName:"ul"},"deployment of ",(0,a.kt)("inlineCode",{parentName:"li"},"next")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"dev"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"staging"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"prod")),(0,a.kt)("li",{parentName:"ul"},"deployment of whole stack ",(0,a.kt)("inlineCode",{parentName:"li"},"strapi")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"next"),". This deployment deploys at first ",(0,a.kt)("inlineCode",{parentName:"li"},"strapi")," and then ",(0,a.kt)("inlineCode",{parentName:"li"},"next"))),(0,a.kt)("h3",{id:"how-to-deploy-to-different-clusters"},"How to deploy to different clusters?"),(0,a.kt)("h4",{id:"dev-1"},"dev"),(0,a.kt)("p",null,"For deployment ",(0,a.kt)("inlineCode",{parentName:"p"},"next")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"dev")," you need to tag your commit in whatever branch with tag ",(0,a.kt)("inlineCode",{parentName:"p"},"dev-next*")," which can be like ",(0,a.kt)("inlineCode",{parentName:"p"},"dev-next1.0"),"\nFor deployment ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"dev")," you need to tag your commit in whatever branch with tag ",(0,a.kt)("inlineCode",{parentName:"p"},"dev-strpai*")," which can be like ",(0,a.kt)("inlineCode",{parentName:"p"},"dev-strapi1.0"),"\nOr for whole stack, you just tag it like ",(0,a.kt)("inlineCode",{parentName:"p"},"dev1.0"),"."),(0,a.kt)("p",null,"Tagging command: ",(0,a.kt)("inlineCode",{parentName:"p"},'git tag -a dev-next1.0 -m "dev-next1.0 - updated feature"'),"\nPush changed to prod: ",(0,a.kt)("inlineCode",{parentName:"p"},"git push --tags")),(0,a.kt)("h4",{id:"staging-1"},"staging"),(0,a.kt)("p",null,"For deployment to ",(0,a.kt)("inlineCode",{parentName:"p"},"staging")," you can merge pull request or tag it accordingly with tag format ",(0,a.kt)("inlineCode",{parentName:"p"},"staging-next*"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"staging-strapi*"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"staging*"),","),(0,a.kt)("h4",{id:"prod-1"},"prod"),(0,a.kt)("p",null,"For deployment to ",(0,a.kt)("inlineCode",{parentName:"p"},"prod")," you can merge pull request or tag it accordingly with tag format ",(0,a.kt)("inlineCode",{parentName:"p"},"prod-next*"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"prod-strapi*"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"prod*"),". You need to be also on ",(0,a.kt)("inlineCode",{parentName:"p"},"master")),(0,a.kt)("h3",{id:"more-commands"},"More commands"),(0,a.kt)("p",null,"If you need here are more commands which can be usefull:\nDelete tag locally: ",(0,a.kt)("inlineCode",{parentName:"p"},"git tag -d staging1.0"),"\nDelete tag on server: ",(0,a.kt)("inlineCode",{parentName:"p"},"git push --delete origin staging1.0")),(0,a.kt)("h3",{id:"pipelines-explanation"},"Pipelines explanation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"deploy-dev:\n    name: after dev Strapi deploy Next\n    if: needs.conditions.outputs.dev == 'true'\n    needs: [conditions, deploy-dev-strapi]\n    uses: bratislava/github-actions/.github/workflows/deploy-with-bratiska-cli.yml@stable\n    with:\n        directory: next/\n        cluster: tkg-innov-dev\n        url: https://tkg.dev.bratislava.sk\n        debug: --debug\n    secrets:\n        service-account: ${{ secrets.DEV_STANDALONE_TOKEN }}\n        registry-pass: ${{ secrets.HARBOR_REGISTRY_PASSWORD }}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"}," if: needs.conditions.outputs.dev == 'true'\n")),(0,a.kt)("p",null,"This condition is checking if this deployment shoud be deployed. Conditions are sotred in repo ",(0,a.kt)("inlineCode",{parentName:"p"},"bratislava/github-actions")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"    needs: [conditions, deploy-dev-strapi]\n")),(0,a.kt)("p",null,"as this job is deploying whole stack, then it needs to deploy first strapi ",(0,a.kt)("inlineCode",{parentName:"p"},"deploy-dev-strapi"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"conditions")," are used in the ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," above"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"    uses: bratislava/github-actions/.github/workflows/deploy-with-bratiska-cli.yml@stable\n")),(0,a.kt)("p",null,"for deployment, we are using ",(0,a.kt)("inlineCode",{parentName:"p"},"bratiska-cli"),", which is handled by this action ",(0,a.kt)("inlineCode",{parentName:"p"},"deploy-with-bratiska-cli.yml"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"stable")," means the stable version of pipelines"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"}," with:\n    directory: next/\n    cluster: tkg-innov-dev\n    url: https://tkg.dev.bratislava.sk\n    debug: --debug\n")),(0,a.kt)("p",null,"passed arguments to ",(0,a.kt)("inlineCode",{parentName:"p"},"deploy-with-bratiska-cli.yml")," for proper deployment"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"secrets:\n    service-account: ${{ secrets.DEV_STANDALONE_TOKEN }}\n    registry-pass: ${{ secrets.HARBOR_REGISTRY_PASSWORD }}\n")))}c.isMDXComponent=!0}}]);