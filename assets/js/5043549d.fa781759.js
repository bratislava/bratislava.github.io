"use strict";(self.webpackChunkbratislava_github_io=self.webpackChunkbratislava_github_io||[]).push([[9801],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||g[h]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6279:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={},i="GraphQL",p={unversionedId:"graphql",id:"graphql",title:"GraphQL",description:"We're using GraphQL priarily when talking to our Strapi CMS servers. Read more about getting the Strapi data with GraphQL in general in their docs.",source:"@site/docs/graphql.md",sourceDirName:".",slug:"/graphql",permalink:"/docs/graphql",draft:!1,editUrl:"https://github.com/bratislava/bratislava.github.io/edit/master/docs/graphql.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"React component structure (bratislava.sk)",permalink:"/docs/bratislava.sk/react-component-structure"},next:{title:"Meilisearch",permalink:"/docs/meilisearch"}},l={},s=[{value:"Connecting to GraphQL APIs using GraphQL Codegen",id:"connecting-to-graphql-apis-using-graphql-codegen",level:2}],c={toc:s};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"graphql"},"GraphQL"),(0,r.kt)("p",null,"We're using ",(0,r.kt)("a",{parentName:"p",href:"https://graphql.org/"},"GraphQL")," priarily when talking to our Strapi CMS servers. Read more about getting the Strapi data with GraphQL in general ",(0,r.kt)("a",{parentName:"p",href:"https://docs.strapi.io/developer-docs/latest/development/plugins/graphql.html"},"in their docs"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If you are joining an existing project and not setting up a new one, you can jump ahead to ",(0,r.kt)("a",{parentName:"p",href:"#generating-and-using-queries"},"Generating and using queries"))),(0,r.kt)("h2",{id:"connecting-to-graphql-apis-using-graphql-codegen"},"Connecting to GraphQL APIs using GraphQL Codegen"),(0,r.kt)("p",null,"We're using ",(0,r.kt)("a",{parentName:"p",href:"https://www.graphql-code-generator.com/"},"GraphQL Codegen")," setup to generate typed clients for our gql servers - particularly Strapi CMS."),(0,r.kt)("p",null,"We're using ",(0,r.kt)("a",{parentName:"p",href:"https://www.graphql-code-generator.com/plugins/typescript/typescript-graphql-request"},"graphql-request plugin")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"mdxAdmonitionTitle"},"Note on using graphql-request:")," at the time of writing there is also apollo-next plugin - the reason we use graphql-request, which is more barebones, is because it did not exist when we were setting this up initially. Apollo-next may be worth a shot with some future project"),(0,r.kt)("h3",{parentName:"admonition",id:"project-setup"},"Project setup"),(0,r.kt)("p",{parentName:"admonition"},"Decide where your ",(0,r.kt)("inlineCode",{parentName:"p"},".graphql")," files will live, and where your client & types should be generated. Usually we use ",(0,r.kt)("inlineCode",{parentName:"p"},"/graphql/index.ts")," for the client and ",(0,r.kt)("inlineCode",{parentName:"p"},"/graphql/queries/**/*.graphql")," for both queries and mutations. With this setup, our ",(0,r.kt)("inlineCode",{parentName:"p"},"codegen.yml")," in our frontend (i.e. Nextjs) root looks like this:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'schema: "http://localhost:1337/graphql"\ndocuments: "./graphql/queries/**/*.{gql,graphql}"\ngenerates:\n  graphql/index.ts:\n    plugins:\n      - typescript\n      - typescript-operations\n      - typescript-graphql-request\n')),(0,r.kt)("p",{parentName:"admonition"},"This means we're generating schema against a locally running strapi server."),(0,r.kt)("blockquote",{parentName:"admonition"},(0,r.kt)("p",{parentName:"blockquote"},"This implies we need a running local server to be able to regenerate our gql client - at the time of writing, strapi v4 does not have an easy way to export gql schema. We can use this approach once hey fix it.")),(0,r.kt)("p",{parentName:"admonition"},"Add the following line into ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},' "scripts": {\n    ...\n    "gen": "graphql-codegen"\n  },\n')),(0,r.kt)("p",{parentName:"admonition"},"and install the following dependencies, both dev and nondev:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"yarn add graphql graphql-tag graphql-request\nyarn add -D @graphql-codegen/cli @graphql-codegen/typescript @graphql-codegen/typescript-graphql-request @graphql-codegen/typescript-operations\n")),(0,r.kt)("p",{parentName:"admonition"},"To use the generated client (sdk) against your graphql server, you need to initialize it, passing in the server endpoint as a parameter. We usually setup a file like ",(0,r.kt)("inlineCode",{parentName:"p"},"utils/gql.ts")," from which we export .the typed client itself The file below deals with different formats of urls being provided from within Kubernetes deployment and local development."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { getSdk } from "../graphql/index"\nimport { GraphQLClient } from "graphql-request"\nimport getConfig from "next/config"\n\nconst { serverRuntimeConfig } = getConfig()\n\n// URL becomes full url to strapi on server, but just /graphql (for proxy) on client\n// all the dealings with protocol are here because we route to a local service address from within k8s and to a full https:// url from local development\n\nconst protocol =\n  process.env.STRAPI_URL &&\n  (process.env.STRAPI_URL.startsWith("http://") || process.env.STRAPI_URL.startsWith("https://"))\n    ? ""\n    : "http://"\nconst gql = new GraphQLClient(\n  `${\n    process.env.STRAPI_URL ? `${protocol}${serverRuntimeConfig.strapiUrl}` : window.location.origin\n  }/graphql`\n)\nexport const client = getSdk(gql)\n')),(0,r.kt)("h3",{parentName:"admonition",id:"generating-and-using-queries"},"Generating and using queries"),(0,r.kt)("p",{parentName:"admonition"},"You need at least a single valid query among your graphql files for client to generate correctly. Check out ",(0,r.kt)("a",{parentName:"p",href:"#exploring-graphql-schema"},"Exploring GraphQL Schema")," to find a valid query for your server. Since most of our Strapi V4 instances have a 'pages' model, the following query to get the total amount of pages usually works:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"query TotalPages {\n  pages {\n    meta {\n      pagination {\n        total\n      }\n    }\n  }\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"You can put this query into a ",(0,r.kt)("inlineCode",{parentName:"p"},"*.graphql")," file into ",(0,r.kt)("inlineCode",{parentName:"p"},"/graphql/queries")," directory."),(0,r.kt)("p",{parentName:"admonition"},"Afterwards, you should be able to run"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"yarn gen\n")),(0,r.kt)("p",{parentName:"admonition"},"If everything was setup correctly, this will generate ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql/index.ts")," file with valid types for your schema, as well as a client with a single query - ",(0,r.kt)("inlineCode",{parentName:"p"},"client.TotalPages")),(0,r.kt)("h2",{parentName:"admonition",id:"using-the-generated-client"},"Using the generated client"),(0,r.kt)("p",{parentName:"admonition"},"Continuing from previous example, if you import which will will return the following data:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { client } from "../utils/gql"\n\n// ...\n\nconst data = await client.TotalPages()\n\n/* \n  if successful, data will look as follows:\n  data = {\n    pages {\n      meta {\n        pagination {\n          total: 358 // the actual number will differ\n        }\n      }\n    }\n  }\n*/\n')),(0,r.kt)("p",{parentName:"admonition"},"In next.js, you often do this inside ",(0,r.kt)("inlineCode",{parentName:"p"},"getStaticProps")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"getServerSideProps"),":"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export const getStaticProps: GetStaticProps = async (ctx) => {\n  // ...\n  const { pages } = await client.TotalPages()\n  return {\n    props: {\n      totalPages: pages.meta.pagination.total,\n    },\n  }\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"If you do this from frontend (loading data from within a React component), you likely want to wrap the client call in something like ",(0,r.kt)("a",{parentName:"p",href:"https://swr.vercel.app/"},"SWR"),", ",(0,r.kt)("a",{parentName:"p",href:"https://react-query-v3.tanstack.com/overview"},"React-Query"),", or just ",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect"),". With SWR it looks like this:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const MyComponent = () => {\n  const { data, error } = useSWR("TotalPagesQuery", () => client.TotalPages())\n  const isLoading = !data && !error\n  return (\n    <div>\n      Total pages count:{" "}\n      {isLoading ? "Loading" : error ? "Error!" : data.pages.meta.pagination.total}\n    </div>\n  )\n}\n')),(0,r.kt)("p",{parentName:"admonition"},"Read more in SWR/ReactQuery docs on handling params and other."),(0,r.kt)("h3",{parentName:"admonition",id:"error-handling"},"Error handling"),(0,r.kt)("p",{parentName:"admonition"},"If there's error on ",(0,r.kt)("em",{parentName:"p"},"any node")," of the result, the whole request will throw. You likely want it wrapped in a try-catch block."),(0,r.kt)("p",{parentName:"admonition"},"This can be dealt with differently (and often should be - so that one missing piece of data does not break your whole page) - read more in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/prisma-labs/graphql-request"},"docs of the graphql-request")," and the codegen graphql-request plugin linked above."),(0,r.kt)("h2",{parentName:"admonition",id:"exploring-graphql-schema"},"Exploring GraphQL schema"),(0,r.kt)("p",{parentName:"admonition"},"You can use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bratislava/graphiql-explorer-example"},"our fork")," of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OneGraph/graphiql-explorer-example"},"OneGraph GraphiQL Explorer")," to browse any GraphQL endpoint. In our case it's usually an endpoint of a Strapi instance. The only thing our fork adds is easy configuration of the endpoint via ",(0,r.kt)("inlineCode",{parentName:"p"},".env"),"."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://api.spacex.land/graphql/"},"A quick example exploring SpaceX data here"))),(0,r.kt)("p",{parentName:"admonition"},"You can use the left panel to easily explore through all of the options provided by the api, and use the params to control filtering/sorting/pagination.")))}g.isMDXComponent=!0}}]);