"use strict";(self.webpackChunkbratislava_github_io=self.webpackChunkbratislava_github_io||[]).push([[2131],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),k=p(n),u=r,m=k["".concat(l,".").concat(u)]||k[u]||c[u]||i;return n?a.createElement(m,s(s({ref:t},d),{},{components:n})):a.createElement(m,s({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=k;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},6451:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={},s="haproxy guide",o={unversionedId:"deployment-and-infrastructure/haproxy",id:"deployment-and-infrastructure/haproxy",title:"haproxy guide",description:"IMPORTANT NOTICE",source:"@site/docs/deployment-and-infrastructure/haproxy.md",sourceDirName:"deployment-and-infrastructure",slug:"/deployment-and-infrastructure/haproxy",permalink:"/docs/deployment-and-infrastructure/haproxy",draft:!1,editUrl:"https://github.com/bratislava/bratislava.github.io/edit/master/docs/deployment-and-infrastructure/haproxy.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Grafana",permalink:"/docs/deployment-and-infrastructure/grafana"},next:{title:"NestJS",permalink:"/docs/category/nestjs"}},l={},p=[{value:"IMPORTANT NOTICE",id:"important-notice",level:4},{value:"haproxy configuration",id:"haproxy-configuration",level:2},{value:"Global",id:"global",level:3},{value:"Defaults",id:"defaults",level:3},{value:"Frontend http",id:"frontend-http",level:3},{value:"Frontend https",id:"frontend-https",level:3},{value:"Backends",id:"backends",level:3}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"haproxy-guide"},"haproxy guide"),(0,r.kt)("h4",{id:"important-notice"},"IMPORTANT NOTICE"),(0,r.kt)("p",null,"Do not edit supervisor cluster during a day or working days. Best days are weekends idealy in the night. When you do a changes, rolling restart is applied so there should be no down time."),(0,r.kt)("h2",{id:"haproxy-configuration"},"haproxy configuration"),(0,r.kt)("p",null,"In our supervisor kubernetes cluster you can fing ConfigMap called ",(0,r.kt)("inlineCode",{parentName:"p"},"haproxy.cfg")," which contains main haproxy files. Now we will go through whole config.\nConfig conatins 4 main sections: ",(0,r.kt)("inlineCode",{parentName:"p"},"global"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"defaults"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"fronted"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"backend")),(0,r.kt)("h3",{id:"global"},"Global"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"    global\n        log stdout format raw local0 info\n        daemon\n        maxconn 50000\n")),(0,r.kt)("p",null,"contains logging format, then it is running as ",(0,r.kt)("inlineCode",{parentName:"p"},"daemon"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"maxconn")," is number of all connections per second."),(0,r.kt)("h3",{id:"defaults"},"Defaults"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"    defaults\n        log global\n        timeout client 60s\n        timeout connect 60s\n        timeout server 60s\n")),(0,r.kt)("p",null,"in defaults, you can find settings for global logging format, or timeouts for connections."),(0,r.kt)("h3",{id:"frontend-http"},"Frontend http"),(0,r.kt)("p",null,"Section ",(0,r.kt)("inlineCode",{parentName:"p"},"frontend http")," contains all things regarding http connections."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'    frontend http\n      bind *:8080   \n      mode http\n      log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r hostname: %H"\n      http-request capture req.hdr(Host) len 100\n      \n      acl isdev hdr(host) -i fix.slovensko-sk-api.bratislava.sk\n      acl ismaster hdr(host) -i slovensko-sk-api.bratislava.sk cdn.bratislava.sk cdn-api.bratislava.sk tkg.dev.bratislava.sk tkg.staging.bratislava.sk tkg.bratislava.sk tkg.master.bratislava.sk grafana.bratislava.sk harbor.bratislava.sk api.dev.bratislava.sk harbor-notary.bratislava.sk kube-services.bratislava.sk\n      \n      use_backend master if ismaster\n      use_backend dev if isdev\n      use_backend dev if { hdr_sub(host) -i dev.bratislava.sk }\n      use_backend staging if { hdr_sub(host) -i staging.bratislava.sk }\n      use_backend prod if { hdr_sub(host) -i bratislava.sk }\n      default_backend prod\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bind *:8080")," - is our external inconing port for http connections"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"mode http")," - defining haproxy format (can be ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"tcp"),")"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r hostname: %H"')," - logging format for debugging"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"http-request capture req.hdr(Host) len 100")," - capturing header host to logs, used also for debugging"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"acl isdev hdr(host) -i fix.slovensko-sk-api.bratislava.sk")," conndition, if url address is ",(0,r.kt)("inlineCode",{parentName:"p"},"fix.slovensko-sk-api.bratislava.sk")," then set condition ",(0,r.kt)("inlineCode",{parentName:"p"},"isdev")," to true "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"acl ismaster hdr(host) -i slovensko-sk-api.bratislava.sk, ...")," same as above but for master"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"use_backend master if ismaster")," if acl condition ",(0,r.kt)("inlineCode",{parentName:"p"},"ismaster")," is true, then route traffic to backend ",(0,r.kt)("inlineCode",{parentName:"p"},"master")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"use_backend dev if isdev")," if acl condition ",(0,r.kt)("inlineCode",{parentName:"p"},"ismdev")," is true, then route traffic to backend ",(0,r.kt)("inlineCode",{parentName:"p"},"dev")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"use_backend dev if { hdr_sub(host) -i dev.bratislava.sk }")," if domain has substring ",(0,r.kt)("inlineCode",{parentName:"p"},"dev.bratislava.sk")," then route this to ",(0,r.kt)("inlineCode",{parentName:"p"},"dev")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"use_backend staging if { hdr_sub(host) -i staging.bratislava.sk }")," if domain has substring ",(0,r.kt)("inlineCode",{parentName:"p"},"staging.bratislava.sk")," then route this to ",(0,r.kt)("inlineCode",{parentName:"p"},"staging")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"use_backend prod if { hdr_sub(host) -i bratislava.sk }")," if domain has substring ",(0,r.kt)("inlineCode",{parentName:"p"},"bratislava.sk")," then route this to ",(0,r.kt)("inlineCode",{parentName:"p"},"prod")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"default_backend prod")," if anything fails then default backend is ",(0,r.kt)("inlineCode",{parentName:"p"},"prod")),(0,r.kt)("h3",{id:"frontend-https"},"Frontend https"),(0,r.kt)("p",null,"Section ",(0,r.kt)("inlineCode",{parentName:"p"},"frontend http")," contains all things regarding https connections."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"    frontend https\n      bind *:8443\n      mode tcp\n      option tcplog\n      \n      tcp-request inspect-delay 5s\n      tcp-request content accept if { req.ssl_hello_type 1 }\n      tcp-request content reject\n      \n      acl ismaster req.ssl_sni -i slovensko-sk-api.bratislava.sk cdn.bratislava.sk cdn-api.bratislava.sk tkg.dev.bratislava.sk tkg.staging.bratislava.sk tkg.bratislava.sk tkg.master.bratislava.sk grafana.bratislava.sk harbor.bratislava.sk api.dev.bratislava.sk harbor-notary.bratislava.sk kube-services.bratislava.sk\n      acl isdev req.ssl_sni -i fix.slovensko-sk-api.bratislava.sk\n      \n      use_backend masters if ismaster\n      use_backend devs if isdev\n      use_backend devs if { req.ssl_sni -m end .dev.bratislava.sk }\n      use_backend stagings if { req.ssl_sni -m end .staging.bratislava.sk }\n      use_backend prods if { req.ssl_sni -m end .bratislava.sk }\n      default_backend prods\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bind *:8443")," - is our external inconing port for http connections"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"mode tcp")," - defining haproxy format (can be ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"tcp"),")"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"option tcplog")," - tcp logging output"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"tcp-request inspect-delay 5s\ntcp-request content accept if { req.ssl_hello_type 1 }\ntcp-request content reject")," - config https specific"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"acl isdev req.ssl_sni -i fix.slovensko-sk-api.bratislava.sk")," conndition, if url address is ",(0,r.kt)("inlineCode",{parentName:"p"},"fix.slovensko-sk-api.bratislava.sk")," then set condition ",(0,r.kt)("inlineCode",{parentName:"p"},"isdev")," to true"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"acl ismaster req.ssl_sni -i slovensko-sk-api.bratislava.sk, ...")," same as above but for master"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"use_backend masters if ismaster")," if acl condition ",(0,r.kt)("inlineCode",{parentName:"p"},"ismaster")," is true, then route traffic to backend ",(0,r.kt)("inlineCode",{parentName:"p"},"masters")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"use_backend devs if isdev")," if acl condition ",(0,r.kt)("inlineCode",{parentName:"p"},"ismdev")," is true, then route traffic to backend ",(0,r.kt)("inlineCode",{parentName:"p"},"devs")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"use_backend devs if { req.ssl_sni -m end .dev.bratislava.sk }")," if domain has substring ",(0,r.kt)("inlineCode",{parentName:"p"},"dev.bratislava.sk")," then route this to ",(0,r.kt)("inlineCode",{parentName:"p"},"devs")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"use_backend stagings if { req.ssl_sni -m end .staging.bratislava.sk }")," if domain has substring ",(0,r.kt)("inlineCode",{parentName:"p"},"staging.bratislava.sk")," then route this to ",(0,r.kt)("inlineCode",{parentName:"p"},"stagings")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"use_backend prods if { req.ssl_sni -m end .bratislava.sk }")," if domain has substring ",(0,r.kt)("inlineCode",{parentName:"p"},"bratislava.sk")," then route this to ",(0,r.kt)("inlineCode",{parentName:"p"},"prods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"default_backend prods")," if anything fails then default backend is ",(0,r.kt)("inlineCode",{parentName:"p"},"prods")),(0,r.kt)("h3",{id:"backends"},"Backends"),(0,r.kt)("p",null,"In this section you can find defined backend servers. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"    backend dev\n      mode http\n      server dev 10.10.10.22:80\n    backend devs\n      mode tcp\n      server dev 10.10.10.22:443\n\n    backend staging\n      mode http\n      server staging 10.10.10.24:80\n    backend stagings\n      mode tcp\n      server staging 10.10.10.24:443\n\n    backend prod\n      mode http\n      server prod 10.10.10.21:80\n    backend prods\n      mode tcp\n      server prod 10.10.10.21:443\n\n    backend master\n      mode http\n      server master 10.10.10.14:80\n    backend masters\n      mode tcp\n      server master 10.10.10.14:443\n")),(0,r.kt)("p",null,"every setting is for ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," and for ",(0,r.kt)("inlineCode",{parentName:"p"},"tcp")," (https)."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"backend master")," - defining backend name ",(0,r.kt)("inlineCode",{parentName:"p"},"master")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"mode http")," - defining ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," haproxy mode for backend"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"server master 10.10.10.14:80")," - ip address with port for http server master (cluster master)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"backend masters")," - defining backend name ",(0,r.kt)("inlineCode",{parentName:"p"},"masters")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"mode tcp")," - defining ",(0,r.kt)("inlineCode",{parentName:"p"},"tcp")," - haproxy mode for https backend"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"server master 10.10.10.14:443")," - ip address with port for https server master (cluster master)"))}c.isMDXComponent=!0}}]);